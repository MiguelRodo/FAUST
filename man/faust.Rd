% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/faust.R, R/zzz.R
\docType{package}
\name{faust}
\alias{faust}
\alias{faust-package}
\title{The FAUST pipeline automatically produces a plot "projectPath/faustData/plotData/scoreLines.pdf"
that can be used to help set this threshold value for a particular experiment.}
\usage{
faust(gatingSet, activeChannels, channelBounds, startingCellPop,
  pDataVar2ConcatenateSamples = "", projectPath = ".",
  depthScoreThreshold = 0.01, selectionQuantile = 0.5,
  debugFlag = FALSE, threadNum = 1, seedValue = 123,
  numForestIter = 1, numScampIter = 1, nameOccuranceNum = 1,
  minClusterSize = 25, drawGateHistograms = 1, initSplitPval = 0,
  supervisedList = NA, annotationsApproved = FALSE)
}
\arguments{
\item{selectionQuantile}{A numeric value between 0 and 1 used for variable selection.
Depth scores are computed for all concatenated samples in the experiment. The empirical
selectionQuantile is then computed across each channel: \code{quantile(channelDepthScores,probs=selectoinQuantile)}.
This empirical quantile is then compared to the depthScoreThreshold to decide whether to include a
channel in the remainder of the pipeline.

The FAUST pipeline automatically produces a plot "projectPath/faustData/plotData/scoreLines.pdf"
that can be used to help set this threshold value for a particular experiment.}

\item{debugFlag}{Boolean value. Set to TRUE to print pipeline status information to the console or a log file.}

\item{threadNum}{Integer value. Many components of the FAUST pipeline support multi-threading on a single CPU.
Set this parameter to the number of threads you wish to use.}

\item{seedValue}{Integer value that determines the random seed. Used for reproducibility.}

\item{numForestIter}{The number of annotation forest grown. Set to 1 by default.}

\item{numScampIter}{The number of SCAMP iterations run at the clustering stage. Set to 1 by default.}

\item{nameOccuranceNum}{The number of times a name has to appear in distinct SCAMP clusterings to be
gated out.}

\item{minClusterSize}{The size of the smallest admissible candidate cluster.
The recursive search for candidate clusters will not consider subsets of observations
below this value as admissible candidates -- it terminates along such branches without
recording the subsets encountered. Increasing this parameter usually increases
the speed of a single SCAMP iteration.}

\item{drawGateHistograms}{Boolean. Set to 1 to draw the gate locations for selected markers
for all samples. Set to 0 to forego the plotting.}

\item{initSplitPval}{The significance level for the DIP test of Hartigan
and Hartigan (1985) used to reconcile annotation boundaries.}

\item{supervisedList}{A list of lists.
The names of list entries correspond to marker names in the active channels vector.
Channels named in this list will have their gate locations modified. See Details.}

\item{annotationsApproved}{Boolean value. FALSE by default to encourage the
user to review the proposed annotation boundaries. When set to TRUE, indicates the user
wants to use the proposed annotation boundaries to cluster and gate the experiment.
If you want to run the FAUST pipeline totally unsupervised, set this parameter to true
before running the pipeline.}
}
\value{
The FAUST pipeline returns a null value on completion. The main output is the file
"projectPath/faustData/faustCountMatrix.rds". The rownames are \code{sampleNames(gatingSet)]}
and the column names are the cell populations discovered by the pipeline. Note that the
special cell population "0_0_0_0_0" counts unclassified cells in the experiment.
}
\description{
The FAUST pipeline automatically produces a plot "projectPath/faustData/plotData/scoreLines.pdf"
that can be used to help set this threshold value for a particular experiment.
}
\examples{

library(BiocManager)
BiocManager::install("flowWorkspaceData")
\dontrun{
faust(gatingSetPath=clusterMatrix,
                         numIter=1,
                         projectPath=tempdir())
table(scampClustering$RunOffVote)
table(scampClustering$MaxVote)
}
}
\author{
Evan Greene \href{mailto:egreene@fredhutch.org}{egreene@fredhutch.org}
}
